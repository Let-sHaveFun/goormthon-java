name: Spring Boot App Deploy

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '.gitignore'
  workflow_dispatch:

env:
  AWS_REGION: ap-northeast-2
  ECR_REGISTRY: 588738576341.dkr.ecr.ap-northeast-2.amazonaws.com  # 🔧 수정: 하드코딩된 올바른 계정 ID
  ECR_REPOSITORY: springboot-app
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build:
    name: Build and Push to ECR
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run tests
        run: ./gradlew test -Dspring.profiles.active=test

      - name: Build with Gradle
        run: ./gradlew build -x test -Dspring.profiles.active=freetier

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          echo "🏗️ Building Docker image..."
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          
          echo "📤 Pushing image to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          
          echo "✅ Image pushed successfully: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  deploy-application:
    name: Deploy Spring Boot Application
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Deploy to Application Server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.APP_SERVER_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          timeout: 300s
          command_timeout: 900s
          script_stop: true
          script: |
            set -e
            
            echo "🚀 Starting Spring Boot application deployment..."
            echo "📊 Current memory status:"
            free -h
            
            # AWS CLI 설정
            export AWS_ACCESS_KEY_ID='${{ secrets.AWS_ACCESS_KEY_ID }}'
            export AWS_SECRET_ACCESS_KEY='${{ secrets.AWS_SECRET_ACCESS_KEY }}'
            export AWS_DEFAULT_REGION='${{ env.AWS_REGION }}'
            
            # ECR 로그인 (올바른 계정 ID 사용)
            echo "🔐 Logging into ECR..."
            if aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}; then
              echo "✅ ECR login successful"
            else
              echo "❌ ECR login failed"
              exit 1
            fi
            
            # 환경 변수 설정
            APP_NAME="springboot-app"
            NEW_IMAGE="${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}"
            DB_SERVER_IP="172.31.38.107"
            
            echo "🎯 Target image: $NEW_IMAGE"
            echo "📍 Database server: $DB_SERVER_IP"
            
            # 이미지 존재 확인
            echo "🔍 Verifying image exists in ECR..."
            if ! aws ecr describe-images --repository-name ${{ env.ECR_REPOSITORY }} --image-ids imageTag=${{ env.IMAGE_TAG }} --region ${{ env.AWS_REGION }} >/dev/null 2>&1; then
              echo "❌ Image not found in ECR"
              echo "📋 Available images:"
              aws ecr describe-images --repository-name ${{ env.ECR_REPOSITORY }} --region ${{ env.AWS_REGION }} --max-items 5 --output table || true
              exit 1
            fi
            
            # DB 연결 테스트
            echo "🔍 Testing database connectivity..."
            if timeout 5 bash -c "</dev/tcp/$DB_SERVER_IP/3306" 2>/dev/null; then
              echo "✅ MySQL connection available"
            else
              echo "⚠️ MySQL connection failed - continuing anyway"
            fi
            
            if timeout 5 bash -c "</dev/tcp/$DB_SERVER_IP/6379" 2>/dev/null; then
              echo "✅ Redis connection available"
            else
              echo "⚠️ Redis connection failed - continuing anyway"
            fi
            
            # Blue-Green 환경 결정
            if docker ps --format "{{.Names}}" | grep -q "springboot-app-blue"; then
              CURRENT_ENV="blue"
              NEW_ENV="green"
              NEW_PORT=8081
            else
              CURRENT_ENV="green"
              NEW_ENV="blue"
              NEW_PORT=8080
            fi
            
            echo "📍 Current: $CURRENT_ENV → Deploying to: $NEW_ENV (port $NEW_PORT)"
            
            # 이미지 풀
            echo "📥 Pulling latest image..."
            if ! docker pull $NEW_IMAGE; then
              echo "❌ Failed to pull image: $NEW_IMAGE"
              exit 1
            fi
            
            # 기존 컨테이너 정리
            echo "🧹 Cleaning up existing $NEW_ENV container..."
            docker stop ${APP_NAME}-${NEW_ENV} 2>/dev/null || true
            docker rm ${APP_NAME}-${NEW_ENV} 2>/dev/null || true
            
            # 환경변수 안전 처리
            MYSQL_USR='${{ secrets.MYSQL_USER }}'
            MYSQL_PWD='${{ secrets.MYSQL_PASSWORD }}'
            MYSQL_DB='${{ secrets.MYSQL_DATABASE }}'
            
            # 새 애플리케이션 컨테이너 시작 (Actuator 설정 문제 해결 포함)
            echo "🚢 Starting new container: ${APP_NAME}-${NEW_ENV}"
            docker run -d \
              --name ${APP_NAME}-${NEW_ENV} \
              -p ${NEW_PORT}:8080 \
              --memory=600m \
              --memory-swap=800m \
              -e SPRING_PROFILES_ACTIVE=freetier \
              -e SPRING_DATASOURCE_URL="jdbc:mysql://${DB_SERVER_IP}:3306/${MYSQL_DB}?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=Asia/Seoul" \
              -e SPRING_DATASOURCE_USERNAME="$MYSQL_USR" \
              -e SPRING_DATASOURCE_PASSWORD="$MYSQL_PWD" \
              -e SPRING_REDIS_HOST=${DB_SERVER_IP} \
              -e SPRING_REDIS_PORT=6379 \
              -e SERVER_PORT=8080 \
              -e JAVA_OPTS="-Xms256m -Xmx512m -XX:+UseG1GC -Dmanagement.endpoint.health.show-components=NEVER -Dmanagement.endpoint.health.show-details=never -Dspring.jpa.open-in-view=false -Dspring.thymeleaf.check-template-location=false" \
              --restart unless-stopped \
              $NEW_IMAGE
            
            # 컨테이너 시작 확인
            echo "⏳ Waiting for container to start..."
            sleep 20
            
            if ! docker ps | grep -q ${APP_NAME}-${NEW_ENV}; then
              echo "❌ Container failed to start!"
              docker logs ${APP_NAME}-${NEW_ENV} --tail 50 2>/dev/null || echo "No logs available"
              exit 1
            fi
            
            echo "✅ Container started successfully"
            echo "📋 Initial container logs:"
            docker logs ${APP_NAME}-${NEW_ENV} --tail 20
            
            # 개선된 헬스체크 (Spring Boot 시작 시간 충분히 고려)
            echo "🏥 Performing health check (allowing up to 5 minutes for Spring Boot startup)..."
            
            for i in {1..60}; do  # 5분 대기 (60 * 5초)
              echo "🔍 Health check attempt $i/60 ($(date '+%H:%M:%S'))"
            
              # 컨테이너가 계속 실행 중인지 확인
              if ! docker ps | grep -q ${APP_NAME}-${NEW_ENV}; then
                echo "❌ Container stopped unexpectedly!"
                docker logs ${APP_NAME}-${NEW_ENV} --tail 50 2>/dev/null || echo "No logs available"
                exit 1
              fi
            
              # Spring Boot "Started" 메시지 확인
              if docker logs ${APP_NAME}-${NEW_ENV} 2>/dev/null | grep -q "Started GoormthonServerApplication"; then
                echo "✅ Spring Boot application started!"
            
                # 포트 확인
                if timeout 3 bash -c "</dev/tcp/localhost/$NEW_PORT" 2>/dev/null; then
                  echo "✅ Port $NEW_PORT is open"
            
                  # 추가 안정화 대기
                  echo "⏳ Waiting for application stabilization..."
                  sleep 15
            
                  # Actuator health 체크
                  if curl -f -s --connect-timeout 10 --max-time 20 http://localhost:${NEW_PORT}/actuator/health >/dev/null 2>&1; then
                    echo "✅ Application is healthy!"
            
                    # Health 상태 확인
                    HEALTH_STATUS=$(curl -s --connect-timeout 10 --max-time 20 http://localhost:${NEW_PORT}/actuator/health 2>/dev/null | jq -r '.status' 2>/dev/null || echo "UP")
                    echo "📊 Application status: $HEALTH_STATUS"
            
                    # 이전 컨테이너 정리
                    if [ "$CURRENT_ENV" != "" ] && [ "$CURRENT_ENV" != "$NEW_ENV" ]; then
                      echo "🗑️ Cleaning up old container..."
                      docker stop ${APP_NAME}-${CURRENT_ENV} 2>/dev/null || true
                      docker rm ${APP_NAME}-${CURRENT_ENV} 2>/dev/null || true
                      echo "✅ Old container cleaned up"
                    fi
            
                    echo "🎉 Deployment completed successfully!"
                    echo "📍 Application URL: http://${{ secrets.APP_SERVER_HOST }}:${NEW_PORT}"
                    echo "📍 Health Check: http://localhost:${NEW_PORT}/actuator/health"
                    echo "📊 Final memory status:"
                    free -h
            
                    echo "📋 Final container status:"
                    docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" | grep springboot || echo "No springboot containers"
                    exit 0
                  else
                    echo "⚠️ Actuator health check failed, but application started - checking root endpoint"
            
                    # 루트 경로 테스트
                    if curl -f -s --connect-timeout 10 --max-time 20 http://localhost:${NEW_PORT}/ >/dev/null 2>&1; then
                      echo "✅ Root endpoint working - deployment successful!"
            
                      # 이전 컨테이너 정리
                      if [ "$CURRENT_ENV" != "" ] && [ "$CURRENT_ENV" != "$NEW_ENV" ]; then
                        echo "🗑️ Cleaning up old container..."
                        docker stop ${APP_NAME}-${CURRENT_ENV} 2>/dev/null || true
                        docker rm ${APP_NAME}-${CURRENT_ENV} 2>/dev/null || true
                        echo "✅ Old container cleaned up"
                      fi
            
                      echo "🎉 Deployment completed successfully!"
                      echo "📍 Application URL: http://${{ secrets.APP_SERVER_HOST }}:${NEW_PORT}"
                      exit 0
                    fi
                  fi
                fi
              fi
            
              # 진행률 표시
              if [ $((i % 10)) -eq 0 ]; then
                echo "📊 Progress: $i/60 ($(((i * 100) / 60))%)"
                echo "📋 Recent logs:"
                docker logs ${APP_NAME}-${NEW_ENV} --tail 3 | grep -E "(Starting|Started|ERROR|Exception)" || echo "Application still initializing..."
              fi
            
              sleep 5
            done
            
            echo "❌ Health check failed after 5 minutes"
            echo "📋 Final container logs:"
            docker logs ${APP_NAME}-${NEW_ENV} --tail 100 2>/dev/null || echo "No logs available"
            
            echo "📊 System status:"
            free -h
            docker ps -a | grep springboot || echo "No springboot containers"
            
            exit 1

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-application]
    if: always()

    steps:
      - name: Success Notification
        if: ${{ needs.deploy-application.result == 'success' }}
        run: |
          echo "🎉 Spring Boot App Deployment SUCCESS!"
          echo "✅ Application: Deployed and Healthy"

      - name: Failure Notification
        if: ${{ needs.deploy-application.result == 'failure' }}
        run: |
          echo "❌ Spring Boot App Deployment FAILED!"
          exit 1