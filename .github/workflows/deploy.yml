name: Spring Boot Dual EC2 Deploy

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '.gitignore'
  workflow_dispatch:

env:
  AWS_REGION: ap-northeast-2
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-northeast-2.amazonaws.com
  ECR_REPOSITORY: springboot-app
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build:
    name: Build and Push to ECR
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run tests
        run: ./gradlew test -Dspring.profiles.active=test

      - name: Build with Gradle
        run: ./gradlew build -x test -Dspring.profiles.active=freetier

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          echo "üèóÔ∏è Building Docker image..."
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          
          echo "üì§ Pushing image to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          
          echo "‚úÖ Image pushed successfully: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  setup-database:
    name: Setup Database Server
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Setup Database Server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DB_SERVER_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          timeout: 300s
          command_timeout: 600s
          script_stop: true
          script: |
            set -e
            
            echo "üóÑÔ∏è Setting up Database Server..."
            echo "üìä Current memory status:"
            free -h
            
            # Docker ÎÑ§Ìä∏ÏõåÌÅ¨ ÏÉùÏÑ±
            docker network create db-network 2>/dev/null || echo "Network already exists"
            
            # MySQL ÏÑ§Ï†ï Î∞è ÏãúÏûë
            if ! docker ps | grep -q mysql-primary; then
              echo "üê¨ Starting MySQL..."
            
              # Í∏∞Ï°¥ MySQL Ïª®ÌÖåÏù¥ÎÑà Ï†ïÎ¶¨
              docker stop mysql-primary mysql-db 2>/dev/null || true
              docker rm mysql-primary mysql-db 2>/dev/null || true
            
              # MySQL ÏãúÏûë (Î©îÎ™®Î¶¨ ÏµúÏ†ÅÌôî)
              docker run -d \
                --name mysql-primary \
                --network db-network \
                -e MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }} \
                -e MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }} \
                -e MYSQL_USER=${{ secrets.MYSQL_USER }} \
                -e MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }} \
                -v mysql_data:/var/lib/mysql \
                -p 3306:3306 \
                --memory=350m \
                --memory-swap=500m \
                --restart unless-stopped \
                mysql:8.0 \
                --innodb-buffer-pool-size=128M \
                --innodb-log-buffer-size=8M \
                --max-connections=50 \
                --innodb-flush-log-at-trx-commit=2
            
              echo "‚è≥ Waiting for MySQL to initialize..."
              sleep 60
            
              # MySQL ÏÉÅÌÉú ÌôïÏù∏
              docker logs mysql-primary --tail 20
            else
              echo "‚úÖ MySQL is already running"
            fi
            
            # Redis ÏÑ§Ï†ï Î∞è ÏãúÏûë
            if ! docker ps | grep -q redis-primary; then
              echo "üì¶ Starting Redis..."
            
              # Í∏∞Ï°¥ Redis Ïª®ÌÖåÏù¥ÎÑà Ï†ïÎ¶¨
              docker stop redis-primary redis-cache 2>/dev/null || true
              docker rm redis-primary redis-cache 2>/dev/null || true
            
              # Redis ÏãúÏûë (Î©îÎ™®Î¶¨ ÏµúÏ†ÅÌôî)
              docker run -d \
                --name redis-primary \
                --network db-network \
                -v redis_data:/data \
                -p 6379:6379 \
                --memory=120m \
                --memory-swap=180m \
                --restart unless-stopped \
                redis:7-alpine \
                redis-server \
                --maxmemory 100mb \
                --maxmemory-policy allkeys-lru \
                --appendonly yes \
                --save 900 1
            
              echo "‚è≥ Waiting for Redis to start..."
              sleep 10
            else
              echo "‚úÖ Redis is already running"
            fi
            
            echo "üìä Database server setup completed!"
            echo "Memory usage:"
            free -h
            echo "Running containers:"
            docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
            
            # Ïó∞Í≤∞ ÌÖåÏä§Ìä∏
            echo "üîç Testing database connections..."
            docker exec mysql-primary mysql -u root -p${{ secrets.MYSQL_ROOT_PASSWORD }} -e "SHOW DATABASES;" || echo "MySQL connection test failed"
            docker exec redis-primary redis-cli ping || echo "Redis connection test failed"

  deploy-application:
    name: Deploy Application Server
    runs-on: ubuntu-latest
    needs: [build, setup-database]

    steps:
      - name: Deploy to Application Server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.APP_SERVER_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          timeout: 300s
          command_timeout: 900s
          script_stop: true
          script: |
            set -e
            
            echo "üöÄ Starting deployment to Application Server..."
            echo "üìä Current memory status:"
            free -h
            
            # AWS CLI ÏÑ§Ï†ï
            aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws configure set default.region ${{ env.AWS_REGION }}
            
            # ECR Î°úÍ∑∏Ïù∏ (Í≤ΩÍ≥† Î©îÏãúÏßÄ Ïà®ÍπÄ)
            echo "üîê Logging into ECR..."
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }} 2>/dev/null
            
            # ÌôòÍ≤Ω Î≥ÄÏàò ÏÑ§Ï†ï
            APP_NAME="springboot-app"
            NEW_IMAGE="${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}"
            DB_SERVER_IP="${{ secrets.DB_SERVER_PRIVATE_IP }}"
            
            echo "üéØ Target image: $NEW_IMAGE"
            echo "üìç Database server: $DB_SERVER_IP"
            
            # Blue-Green ÌôòÍ≤Ω Í≤∞Ï†ï
            if docker ps --format "table {{.Names}}" | grep -q "${APP_NAME}-blue"; then
              CURRENT_ENV="blue"
              NEW_ENV="green"
              NEW_PORT=8081
            else
              CURRENT_ENV="green"
              NEW_ENV="blue"
              NEW_PORT=8080
            fi
            
            echo "üìç Current: $CURRENT_ENV ‚Üí Deploying to: $NEW_ENV (port $NEW_PORT)"
            
            # Ïù¥ÎØ∏ÏßÄ ÌíÄ
            echo "üì• Pulling latest image..."
            if ! docker pull $NEW_IMAGE; then
              echo "‚ùå Failed to pull image: $NEW_IMAGE"
              aws ecr describe-images --repository-name ${{ env.ECR_REPOSITORY }} --region ${{ env.AWS_REGION }} --max-items 5 || true
              exit 1
            fi
            
            # Í∏∞Ï°¥ Ïª®ÌÖåÏù¥ÎÑà Ï†ïÎ¶¨
            echo "üßπ Cleaning up existing $NEW_ENV container..."
            docker stop ${APP_NAME}-${NEW_ENV} 2>/dev/null || true
            docker rm ${APP_NAME}-${NEW_ENV} 2>/dev/null || true
            
            # ÏÉà Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò Ïª®ÌÖåÏù¥ÎÑà ÏãúÏûë
            echo "üö¢ Starting new container: ${APP_NAME}-${NEW_ENV}"
            docker run -d \
              --name ${APP_NAME}-${NEW_ENV} \
              -p ${NEW_PORT}:8080 \
              --memory=600m \
              --memory-swap=800m \
              -e SPRING_PROFILES_ACTIVE=freetier \
              -e SPRING_DATASOURCE_URL="jdbc:mysql://${DB_SERVER_IP}:3306/${{ secrets.MYSQL_DATABASE }}?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=Asia/Seoul" \
              -e SPRING_DATASOURCE_USERNAME=${{ secrets.MYSQL_USER }} \
              -e SPRING_DATASOURCE_PASSWORD=${{ secrets.MYSQL_PASSWORD }} \
              -e SPRING_REDIS_HOST=${DB_SERVER_IP} \
              -e SPRING_REDIS_PORT=6379 \
              -e SERVER_PORT=8080 \
              -e JAVA_OPTS="-Xms256m -Xmx512m -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -XX:+UseStringDeduplication" \
              --restart unless-stopped \
              $NEW_IMAGE
            
            # Ïª®ÌÖåÏù¥ÎÑà ÏãúÏûë ÌôïÏù∏
            echo "‚è≥ Waiting for container to start..."
            sleep 10
            
            if ! docker ps | grep -q ${APP_NAME}-${NEW_ENV}; then
              echo "‚ùå Container failed to start!"
              docker logs ${APP_NAME}-${NEW_ENV} --tail 50 2>/dev/null || echo "No logs available"
              exit 1
            fi
            
            echo "‚úÖ Container started successfully"
            
            # Ìó¨Ïä§Ï≤¥ÌÅ¨
            echo "üè• Performing health check..."
            for i in {1..24}; do  # 2Î∂Ñ ÎåÄÍ∏∞ (24 * 5Ï¥à)
              echo "üîç Health check attempt $i/24..."
            
              # Ïª®ÌÖåÏù¥ÎÑàÍ∞Ä Í≥ÑÏÜç Ïã§Ìñâ Ï§ëÏù∏ÏßÄ ÌôïÏù∏
              if ! docker ps | grep -q ${APP_NAME}-${NEW_ENV}; then
                echo "‚ùå Container stopped unexpectedly!"
                docker logs ${APP_NAME}-${NEW_ENV} --tail 50 2>/dev/null || echo "No logs available"
                exit 1
              fi
            
              # Ìè¨Ìä∏ ÌôïÏù∏
              if nc -z localhost ${NEW_PORT} 2>/dev/null; then
                echo "‚úÖ Port ${NEW_PORT} is open"
            
                # Actuator health Ï≤¥ÌÅ¨
                if curl -f -s http://localhost:${NEW_PORT}/actuator/health >/dev/null 2>&1; then
                  echo "‚úÖ Application is healthy!"
            
                  # DB Ïó∞Í≤∞ Ï≤¥ÌÅ¨ (ÏÑ†ÌÉùÏÇ¨Ìï≠)
                  DB_STATUS=$(curl -s http://localhost:${NEW_PORT}/actuator/health 2>/dev/null | jq -r '.status' 2>/dev/null || echo "unknown")
                  echo "üìä Application status: $DB_STATUS"
            
                  # Nginx ÏÑ§Ï†ï ÏóÖÎç∞Ïù¥Ìä∏
                  echo "üîÑ Updating Nginx configuration..."
                  if [ -f /etc/nginx/conf.d/springboot.conf ]; then
                    sudo sed -i "s/server localhost:[0-9]*;/server localhost:${NEW_PORT};/" /etc/nginx/conf.d/springboot.conf
            
                    if sudo nginx -t; then
                      sudo systemctl reload nginx
                      echo "‚úÖ Nginx updated successfully"
                    else
                      echo "‚ùå Nginx configuration test failed"
                      exit 1
                    fi
                  else
                    echo "‚ö†Ô∏è Nginx config file not found, skipping update"
                  fi
            
                  # Ïù¥Ï†Ñ Ïª®ÌÖåÏù¥ÎÑà Ï†ïÎ¶¨
                  if [ "$CURRENT_ENV" != "" ] && [ "$CURRENT_ENV" != "$NEW_ENV" ]; then
                    echo "üóëÔ∏è Cleaning up old container..."
                    sleep 10
                    docker stop ${APP_NAME}-${CURRENT_ENV} 2>/dev/null || true
                    docker rm ${APP_NAME}-${CURRENT_ENV} 2>/dev/null || true
                    echo "‚úÖ Old container cleaned up"
                  fi
            
                  echo "üéâ Deployment completed successfully!"
                  echo "üìç Application URL: http://${{ secrets.APP_SERVER_HOST }}"
                  echo "üìç Internal URL: http://localhost:${NEW_PORT}"
                  echo "üìä Final memory status:"
                  free -h
            
                  # ÏµúÏ¢Ö ÏÉÅÌÉú ÌôïÏù∏
                  echo "üìã Final container status:"
                  docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" | grep springboot || echo "No springboot containers"
                  exit 0
                fi
              fi
            
              echo "‚è≥ Waiting 5 seconds before next attempt..."
              sleep 5
            done
            
            echo "‚ùå Health check failed after 24 attempts (2 minutes)"
            echo "üìã Container logs:"
            docker logs ${APP_NAME}-${NEW_ENV} --tail 100 2>/dev/null || echo "No logs available"
            
            echo "üìä System status:"
            free -h
            docker ps -a | grep springboot || echo "No springboot containers"
            
            exit 1

  verify-deployment:
    name: Verify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-application]
    if: success()

    steps:
      - name: Verify Application Health
        run: |
          echo "üîç Verifying deployment..."
          
          # Ïô∏Î∂ÄÏóêÏÑú Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò Ï†ëÍ∑º ÌÖåÏä§Ìä∏
          APP_URL="http://${{ secrets.APP_SERVER_HOST }}"
          
          echo "Testing application endpoint: $APP_URL"
          
          # Í∏∞Î≥∏ Ïó∞Í≤∞ ÌÖåÏä§Ìä∏
          if curl -f -s --connect-timeout 10 "$APP_URL" >/dev/null; then
            echo "‚úÖ Application is accessible from external network"
          else
            echo "‚ö†Ô∏è Application might not be accessible externally (this is normal if Nginx is not configured)"
          fi
          
          echo "üéâ Deployment verification completed!"
          echo "üìù Next steps:"
          echo "   1. Configure domain/SSL if needed"
          echo "   2. Set up monitoring and alerts"
          echo "   3. Configure automated backups"

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [setup-database, deploy-application, verify-deployment]
    if: always()

    steps:
      - name: Notify Success
        if: ${{ needs.deploy-application.result == 'success' }}
        run: |
          echo "üéâ Deployment completed successfully!"
          echo "‚úÖ Database Server: Ready"
          echo "‚úÖ Application Server: Deployed"
          echo "‚úÖ Health Check: Passed"

      - name: Notify Failure
        if: ${{ needs.deploy-application.result == 'failure' }}
        run: |
          echo "‚ùå Deployment failed!"
          echo "Please check the logs for more details."
          exit 1